/*
This file has been generated.
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	propsyv1 "github.com/seznam/ProPsy/pkg/apis/propsy/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeProPsyServices implements ProPsyServiceInterface
type FakeProPsyServices struct {
	Fake *FakePropsyV1
	ns   string
}

var propsyservicesResource = schema.GroupVersionResource{Group: "propsy.seznam.cz", Version: "v1", Resource: "propsyservices"}

var propsyservicesKind = schema.GroupVersionKind{Group: "propsy.seznam.cz", Version: "v1", Kind: "ProPsyService"}

// Get takes name of the proPsyService, and returns the corresponding proPsyService object, and an error if there is any.
func (c *FakeProPsyServices) Get(name string, options v1.GetOptions) (result *propsyv1.ProPsyService, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(propsyservicesResource, c.ns, name), &propsyv1.ProPsyService{})

	if obj == nil {
		return nil, err
	}
	return obj.(*propsyv1.ProPsyService), err
}

// List takes label and field selectors, and returns the list of ProPsyServices that match those selectors.
func (c *FakeProPsyServices) List(opts v1.ListOptions) (result *propsyv1.ProPsyServiceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(propsyservicesResource, propsyservicesKind, c.ns, opts), &propsyv1.ProPsyServiceList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &propsyv1.ProPsyServiceList{ListMeta: obj.(*propsyv1.ProPsyServiceList).ListMeta}
	for _, item := range obj.(*propsyv1.ProPsyServiceList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested proPsyServices.
func (c *FakeProPsyServices) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(propsyservicesResource, c.ns, opts))

}

// Create takes the representation of a proPsyService and creates it.  Returns the server's representation of the proPsyService, and an error, if there is any.
func (c *FakeProPsyServices) Create(proPsyService *propsyv1.ProPsyService) (result *propsyv1.ProPsyService, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(propsyservicesResource, c.ns, proPsyService), &propsyv1.ProPsyService{})

	if obj == nil {
		return nil, err
	}
	return obj.(*propsyv1.ProPsyService), err
}

// Update takes the representation of a proPsyService and updates it. Returns the server's representation of the proPsyService, and an error, if there is any.
func (c *FakeProPsyServices) Update(proPsyService *propsyv1.ProPsyService) (result *propsyv1.ProPsyService, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(propsyservicesResource, c.ns, proPsyService), &propsyv1.ProPsyService{})

	if obj == nil {
		return nil, err
	}
	return obj.(*propsyv1.ProPsyService), err
}

// Delete takes name of the proPsyService and deletes it. Returns an error if one occurs.
func (c *FakeProPsyServices) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(propsyservicesResource, c.ns, name), &propsyv1.ProPsyService{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeProPsyServices) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(propsyservicesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &propsyv1.ProPsyServiceList{})
	return err
}

// Patch applies the patch and returns the patched proPsyService.
func (c *FakeProPsyServices) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *propsyv1.ProPsyService, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(propsyservicesResource, c.ns, name, pt, data, subresources...), &propsyv1.ProPsyService{})

	if obj == nil {
		return nil, err
	}
	return obj.(*propsyv1.ProPsyService), err
}
