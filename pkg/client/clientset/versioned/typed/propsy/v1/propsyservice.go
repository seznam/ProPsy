/*
This file has been generated.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/seznam/ProPsy/pkg/apis/propsy/v1"
	scheme "github.com/seznam/ProPsy/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ProPsyServicesGetter has a method to return a ProPsyServiceInterface.
// A group's client should implement this interface.
type ProPsyServicesGetter interface {
	ProPsyServices(namespace string) ProPsyServiceInterface
}

// ProPsyServiceInterface has methods to work with ProPsyService resources.
type ProPsyServiceInterface interface {
	Create(*v1.ProPsyService) (*v1.ProPsyService, error)
	Update(*v1.ProPsyService) (*v1.ProPsyService, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.ProPsyService, error)
	List(opts metav1.ListOptions) (*v1.ProPsyServiceList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ProPsyService, err error)
	ProPsyServiceExpansion
}

// proPsyServices implements ProPsyServiceInterface
type proPsyServices struct {
	client rest.Interface
	ns     string
}

// newProPsyServices returns a ProPsyServices
func newProPsyServices(c *PropsyV1Client, namespace string) *proPsyServices {
	return &proPsyServices{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the proPsyService, and returns the corresponding proPsyService object, and an error if there is any.
func (c *proPsyServices) Get(name string, options metav1.GetOptions) (result *v1.ProPsyService, err error) {
	result = &v1.ProPsyService{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("propsyservices").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ProPsyServices that match those selectors.
func (c *proPsyServices) List(opts metav1.ListOptions) (result *v1.ProPsyServiceList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.ProPsyServiceList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("propsyservices").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested proPsyServices.
func (c *proPsyServices) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("propsyservices").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a proPsyService and creates it.  Returns the server's representation of the proPsyService, and an error, if there is any.
func (c *proPsyServices) Create(proPsyService *v1.ProPsyService) (result *v1.ProPsyService, err error) {
	result = &v1.ProPsyService{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("propsyservices").
		Body(proPsyService).
		Do().
		Into(result)
	return
}

// Update takes the representation of a proPsyService and updates it. Returns the server's representation of the proPsyService, and an error, if there is any.
func (c *proPsyServices) Update(proPsyService *v1.ProPsyService) (result *v1.ProPsyService, err error) {
	result = &v1.ProPsyService{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("propsyservices").
		Name(proPsyService.Name).
		Body(proPsyService).
		Do().
		Into(result)
	return
}

// Delete takes name of the proPsyService and deletes it. Returns an error if one occurs.
func (c *proPsyServices) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("propsyservices").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *proPsyServices) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("propsyservices").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched proPsyService.
func (c *proPsyServices) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ProPsyService, err error) {
	result = &v1.ProPsyService{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("propsyservices").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
